import { withLayoutMain } from "../../layouts/LayoutMain/LayoutMain"
import Head from "next/head"
import { withCSR } from "../../HOC/with-CSR"
import { dehydrate, QueryClient, useQuery, useQueryClient } from "react-query"
import { config } from "../../lib/react-query-config"
import { fetchProductsByCategory } from "../../api/products"
import Error from "../../components/Error/Error"

export const getServerSideProps = withCSR(async ctx => {
  // console.log('CategoryPage getServerSideProps => ctx =>', ctx)

  const category = ctx.params.category
  // console.log('category via ctx.params', category)

  let isError = false
  const queryClient = new QueryClient(config)

  try {
    //Здесь будет prefetchQuery по категории,
    //чтобы потом в глубине компонентов использовать useQuery по КЛЮЧУ категории
    //Если в RQDevTools нет запроса, значит где то ошибка, которую тяжело найти на SSR
    await queryClient.fetchQuery({
      queryKey: [category],
      queryFn: () => fetchProductsByCategory(category),
      // only prefetch if older than 10 seconds
      staleTime: 10 * 1000
    })
  } catch (axiosErrorMessage) {
    //Желтый цвет
    console.error('\x1b[43m%s\x1b[0m', 'Catch SSR CategoryPage => ' + axiosErrorMessage)
    isError = true

    //Это понадобится для простой стр 404
    // ctx.res.statusCode = result
  }

  return {
    props: {
      isError,
      dehydratedState: dehydrate(queryClient)
    }
  }
})

const CategoryPage = (props): JSX.Element => {
  console.log(props)
  // Если ошибка в базовом запроссе из getServerSideProps
  if (props.isError) return <Error />

  // Если ошибки нет данные ФЕТЧАСТСЯ на этот запрос и лежат в RQ кэше
  return (
    <>
      <Head>
        <title>Тайтл магазина</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="pt-10 ">
        <div className="flex">
          <aside>Фильтры</aside>
          <main>Мейн</main>
        </div>
      </div>
    </>
  )
}

export default withLayoutMain(CategoryPage)
